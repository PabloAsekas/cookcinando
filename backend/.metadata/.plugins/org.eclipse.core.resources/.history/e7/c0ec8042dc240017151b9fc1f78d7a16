package daw.cookcinando.api;

import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import daw.cookcinando.UserComponent;
import daw.cookcinando.model.User;
import daw.cookcinando.model.UserAdmin;
import daw.cookcinando.model.UserBasic;
import daw.cookcinando.model.UserEnterprise;

@RestController
public class LoginRestController {

	private static final Logger log = LoggerFactory.getLogger(LoginRestController.class);
	
	@Autowired
	private UserComponent userComponent;
	
	@RequestMapping("/api/logIn")
	public ResponseEntity<User> logIn() {
		
		if(!userComponent.isLoggedUser()) {
			log.info("Not user logged");
			return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
		}
		else {
			User loggedUser = userComponent.getLoggedUser();
			log.info("Logged as " + loggedUser.getNick());
			return new ResponseEntity<>(loggedUser, HttpStatus.OK);
		}
	}
	
//	@RequestMapping("/api/logIn")
//	public ResponseEntity<User> logIn() {
//		
//		if(!userComponent.isLoggedUser()) {
//			log.info("Not user logged");
//			return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
//		}
//		else {
//			if(userComponent.getLoggedUser().getRoles().size() == 1){
//				UserBasic loggedUser = new UserBasic(userComponent.getLoggedUser().getName(),userComponent.getLoggedUser().getSurname(),userComponent.getLoggedUser().getDescription(), userComponent.getLoggedUser().getImage(), userComponent.getLoggedUser().getNick(),userComponent.getLoggedUser().getEmail(),  userComponent.getLoggedUser().getPasswordHash());
//				loggedUser.setRoles(userComponent.getLoggedUser().getRoles());
//				return new ResponseEntity<>(loggedUser, HttpStatus.OK);
//			}
//			
//			else if(userComponent.getLoggedUser().getRoles().size() == 2){
//				UserEnterprise loggedUser = new UserEnterprise(userComponent.getLoggedUser().getName(), userComponent.getLoggedUser().getSurname(), userComponent.getLoggedUser().getDescription(), userComponent.getLoggedUser().getImage(), userComponent.getLoggedUser().getNick(), userComponent.getLoggedUser().getEmail(), userComponent.getLoggedUser().getPasswordHash());
//				loggedUser.setRoles(userComponent.getLoggedUser().getRoles());
//				return new ResponseEntity<>(loggedUser, HttpStatus.OK);
//			}
//			
//			else if(userComponent.getLoggedUser().getRoles().size() == 3){
//				UserAdmin loggedUser = new UserAdmin(userComponent.getLoggedUser().getName(), userComponent.getLoggedUser().getSurname(), userComponent.getLoggedUser().getDescription(), userComponent.getLoggedUser().getImage(), userComponent.getLoggedUser().getNick(), userComponent.getLoggedUser().getEmail(), userComponent.getLoggedUser().getPasswordHash());
//				loggedUser.setRoles(userComponent.getLoggedUser().getRoles());
//				return new ResponseEntity<>(loggedUser, HttpStatus.OK);
//			}
//			
//			//return new ResponseEntity<>(loggedUser, HttpStatus.OK);
//			return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
//		}
//	}
	
	@RequestMapping("/api/logOut")
	public ResponseEntity<Boolean> logOut(HttpSession session) {
		
		if(!userComponent.isLoggedUser()) {
			log.info("Not user logged");
			return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
		}
		else {
			session.invalidate();
			log.info("Logged out");
			return new ResponseEntity<>(true, HttpStatus.OK);
		}
	}
}
